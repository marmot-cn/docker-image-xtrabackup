#!/bin/bash

DEBUG=${DEBUG:-}
if [ x"$DEBUG" = x"ECHO" ] ; then
   set -x
fi

set -e

#
# Backup Mode. Possible values:
# - SIMPLE: Create ${TARGET_PREFIX}/${DATE}
# - FULL: Create ${TARGET_PREFIX}/full-${DATE}
# - INCREMENTAL: Create ${TARGET_PREFIX}/full-{LASTDATE}-inc-${DATE} based on the last full-${DATE}
#
BACKUP_MODE="${BACKUP_MODE:-SIMPLE}"
RUN_EVERY="${RUN_EVERY:-}"
MYSQL_PASSWORD="${MYSQL_PASSWORD:-}"
MYSQL_HOST="${MYSQL_HOST:-}"
MYSQL_PORT="${MYSQL_PORT}"
KEEP_BACKUPS="${KEEP_BACKUPS:-4}"

BACKUP_DIRECTORY="/target"
DATA_DIRECTORY="/var/lib/mysql"

#
# Find the directory name of the latest full backup
#
find_last_full_backup() {
	FILES=( $(ls -d "${BACKUP_DIRECTORY}/"full-????-??-??-??????) )

	basename ${FILES[-1]}

	return
}

setDefaults() {
	if [ -z "${MYSQL_USER}" ] ; then
		echo "WARNING: Running with default user."
	else
		echo "Connecting as ${MYSQL_USER}"
		USER=(--user "${MYSQL_USER}")
	fi

	if [ -z "${MYSQL_PASSWORD}" ] ; then
		echo "WARNING: Running without password."
	else
		echo "Connecting with password"
		PASSWORD=(--password "${MYSQL_PASSWORD}")
	fi

	if [ -z "${MYSQL_HOST}" ] ; then

		echo "WARNING: Connecting to default host 'source', make sure to set links"
		MYSQL_HOST="target"
	else
		echo "Connecting to host $MYSQL_HOST"
	fi

	if [ -z "$MYSQL_PORT" ] ; then
		MYSQL_PORT="3306"
		echo "WARNING: Connecting to default port '3306'"
	else
		echo "Connecting to port $MYSQL_PORT"
	fi

	return
}

usage() {
	echo "======================================================================"
	echo "= Usage"
	echo "======================================================================"
	echo "docker run registry.cn-hangzhou.aliyuncs.com/marmot/xtrabackup -v "name-backup-directory:${BACKUP_DIRECTORY}" [COMMAND]"
	echo ""
	echo "The registry.cn-hangzhou.aliyuncs.com/marmot/xtrabackup docker image tries to provide percona xtrabackup for Mysql 5.7"
	echo ""


	echo "======================================================================"
	echo "= Commands"
	echo "======================================================================"
	echo "- backup"
	echo "  Does a backup, prepare, prepare cycle from /var/lib/mysql to ${BACKUP_DIRECTORY}/YY-mm-dd-HH_ii"
	echo "  If the environment variable RUN_EVERY is set then backups will continue to be made, with"
	echo " 'sleep \$RUN_EVERY' in between"
	echo ""
	echo "- restore YY-mm-dd-HH_ii"
	echo "  Does a copy-back ${BACKUP_DIRECTORY}/YY-mm-dd-HH_ii to /var/lib/mysql"
	echo ""
	echo "- run COMMAND"
	echo "  Runs the given command within the container."

	exit 0
}

backup() {

	RUNNING="true"
	while [ x"$RUNNING" = x"true" ] ; do

		DATE=$(date '+%Y-%m-%d-%H%M%S')
		BACKUP_NAME="${DATE}"

		if [ x"${BACKUP_MODE}" = x"FULL" ] ; then
			echo "======================================================================"
			echo "= Full backup process"
			echo "======================================================================"
			echo ""

			BACKUP_NAME="full-${DATE}"
		fi

		if [ x"${BACKUP_MODE}" = x"INCREMENTAL" ] ; then
			echo "======================================================================"
			echo "= Incremental backup process"
			echo "======================================================================"
			echo ""
			BASE_BACKUP_NAME="$(find_last_full_backup)"
			BASE_BACKUP_PATH="${BACKUP_DIRECTORY}/${BASE_BACKUP_NAME}"
			BACKUP_NAME="${BASE_BACKUP_NAME}-inc-$DATE"
			echo "Base backup: ${BASE_BACKUP_NAME}"
			echo ""
		fi

		BACKUP_PATH="${BACKUP_DIRECTORY}/$BACKUP_NAME"

		echo "======================================================================"
		echo "= Starting backup process to $BACKUP_PATH"
		echo "======================================================================"
		echo ""

		setDefaults

		if [ ! -d "$BACKUP_PATH" ] ; then
			echo "$BACKUP_PATH does not exist yet, creating"
			mkdir -p "$BACKUP_PATH"
		fi

		echo "Creating backup in $BACKUP_PATH"

		if [ x"${BACKUP_MODE}" = x"INCREMENTAL" ] ; then
			# Backup - copies innodb files and reads binary log while doing so
			xtrabackup --backup --datadir="$DATA_DIRECTORY" \
				--incremental-basedir="${BASE_BACKUP_PATH}" \
				--target-dir="$BACKUP_PATH" ${USER[@]} ${PASSWORD[@]} \
				--host "${MYSQL_HOST}" --port ${MYSQL_PORT}
		else
			# Backup - copies innodb files and reads binary log while doing so
			xtrabackup --backup --datadir="$DATA_DIRECTORY" \
				--target-dir="$BACKUP_PATH" ${USER[@]} ${PASSWORD[@]} \
				--host "${MYSQL_HOST}" --port ${MYSQL_PORT}
		fi

		if [ x"${BACKUP_MODE}" = x"SIMPLE" ] ; then
			echo "Mode is SIMPLE, preparing backups"

			# First prepare - selfheal innodb and apply binary log to make it consistent
			xtrabackup --prepare --target-dir="$BACKUP_PATH"
			# Second prepare - write logfiles for faster server startup
			xtrabackup --prepare --target-dir="$BACKUP_PATH"
		fi
		echo "$BACKUP_PATH Done"

		if [ ! -z "${RUN_EVERY}" ] ; then

			echo "Sleeping for ${RUN_EVERY} before starting again"
			sleep "${RUN_EVERY}"

		else

			echo "Environment variable RUN_EVERY was not set, not looping"
			RUNNING="false"

		fi


	done

	exit 0
}

#
# Input:
# - $1 Incremental Backup directory
# Output:
# - Full backup which is the base of the incremental backup
#
parse_full_backup_base() {
	sed 's~^\(full-[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9]\).*~\1~' <<< "$1"
	return
}

#
# Parameter
# $1 - TARGET_PREFIX - The prefix(directory) in which the NAME directory lies
# $2 - NAME - The name of the backup to be restored
# $3 - RESTORE_DIRECTORY - the temporary directory in which the backup should be restored
#
#
restore_incremental() {

	local BACKUP_DIRECTORY="$1"
	local BACKUP_NAME="$2"
	local RESTORE_DIRECTORY="$3"
	local BACKUP_PATH="${BACKUP_DIRECTORY}/${BACKUP_NAME}"
	local BACKUP_INCREMENT_PATH="/tmp/${BACKUP_NAME}-inc1"

	echo "======================================================================"
	echo "= Incremental full backup ${BACKUP_PATH}"
	echo "======================================================================"
	echo ""


	BASE_BACKUP_NAME="$(parse_full_backup_base ${BACKUP_NAME})"

	BASE_BACKUP_PATH="${BACKUP_DIRECTORY}/${BASE_BACKUP_NAME}"

	# Copy the full backup - preparing incremental backups would otherwise overwrite the full backup
	if [ ! -d "${BASE_BACKUP_PATH}" ] ; then
		echo "E> Base backup ${BASE_BACKUP_PATH} does not exist. Aborting."
		exit 1
	fi

	echo "Copying full backup"
	cp -Rf "${BASE_BACKUP_PATH}" "${RESTORE_DIRECTORY}"
	du -sh /tmp/*

	#
	# Copying the incremental backup. Xtrabackup accesses a lot of files at the same time. Backups are usually on a slow
	# medium which might not allow such access
	#
	echo "Copying incremental Backup"
	cp -Rf "${BACKUP_PATH}" "${BACKUP_INCREMENT_PATH}"
	du -sh /tmp/*

	# Prepare the full backup
	echo "Preparing ${BASE_BACKUP_NAME}"
	xtrabackup --prepare --apply-log-only --target-dir="$RESTORE_DIRECTORY"

	# apply the incremental backup
	echo "Preparing ${BACKUP_NAME}"
	xtrabackup --prepare --target-dir="$RESTORE_DIRECTORY" --incremental-dir="${BACKUP_INCREMENT_PATH}"

	echo "Done preparing"
	# copying back the prepared directory to the data directory is done in restore() as it is a shared step

	return
}


#
# Restore a full backup
#
restore_full() {

	local BACKUP_DIRECTORY="$1"
	local BACKUP_NAME="$2"
	local RESTORE_DIRECTORY="$3"
	local BACKUP_PATH="${BACKUP_DIRECTORY}/${BACKUP_NAME}"

	echo "======================================================================"
	echo "= Restoring full backup ${BACKUP_PATH}"
	echo "======================================================================"
	echo ""

	# Copy the backup to a temporary restore directory. Otherwise the the backup would be prepared and it would no longer
	# be possible to use it as base to restore incremental backups
	cp -Rf "${BACKUP_PATH}" "${RESTORE_DIRECTORY}"
	du -sh /tmp/*

	# Prepare the backup
	xtrabackup --prepare --target-dir="$RESTORE_DIRECTORY"

	# copying back the prepared directory to the data directory is done in restore() as it is a shared step

	return
}

#
# Restore $1
#
# Parameter
# $1 - BACKUP_DIRECTORY
# $2 - BACKUP_NAME
#
#
restore() {

	local BACKUP_DIRECTORY="$1"
	local BACKUP_NAME="$2"
	local BACKUP_PATH="${BACKUP_DIRECTORY}/${BACKUP_NAME}"

	echo "======================================================================"
	echo "= Starting restore process from ${BACKUP_PATH}"
	echo "======================================================================"
	echo ""

	if [ -z "$BACKUP_NAME" ] ; then

		usage

		echo "E> Error: no target backup given to"
		exit 1
	fi

	if [ ! -d "${BACKUP_PATH}" ] ; then
		echo "E> Directory '${BACKUP_PATH}' does not exist. Backup restore failed."
		exit 2
	fi

	# Create the TEMPORARY_RESTORE_PATH and make sure it is empty
	TEMPORARY_RESTORE_PATH="/tmp/${BACKUP_NAME}"
	if [ -d "${TEMPORARY_RESTORE_PATH}" ] ; then
		echo "Restore directory ${TEMPORARY_RESTORE_PATH} already exists. Deleting"
		rm -Rf "${TEMPORARY_RESTORE_PATH}"
	fi

	local REGEX='^full-.*-inc-.*'
	if [[ "${BACKUP_NAME}" =~ $REGEX ]] ; then
		restore_incremental "$BACKUP_DIRECTORY" "$BACKUP_NAME" "${TEMPORARY_RESTORE_PATH}"
	else
		restore_full "$BACKUP_DIRECTORY" "${BACKUP_NAME}" "${TEMPORARY_RESTORE_PATH}"
	fi

	# Copy back the prepared data
	xtrabackup --copy-back --datadir="$DATA_DIRECTORY" --target-dir="${TEMPORARY_RESTORE_PATH}"
	echo "Done"

	exit 0
}

cleanup() {
	echo "======================================================================"
	echo "= Starting cleanup process"
	echo "======================================================================"
	echo ""

	IFS='
'
	local FULL_BACKUPS=( $(find "${BACKUP_DIRECTORY}" -mindepth 1 -maxdepth 1 -name 'full-????-??-??-??????' -printf '%f\n' | sort -d -r) )
	local NUM_FULL_BACKUPS="${#FULL_BACKUPS[@]}"
	echo "Found ${NUM_FULL_BACKUPS} full backups"
	echo "Keeping ${KEEP_BACKUPS} backups"
	if [ "${NUM_FULL_BACKUPS}" -le "${KEEP_BACKUPS}" ] ; then
		echo "No more than ${KEEP_BACKUPS} full backups found."
		echo "Exiting."
		exit 0
	fi

	index="${KEEP_BACKUPS}"
	while [ "$index" -lt "${NUM_FULL_BACKUPS}" ] ; do
		local BACKUP_NAME="${FULL_BACKUPS[$index]}"
		echo "Removing $index: ${BACKUP_NAME}"
		remove ${BACKUP_NAME}
		index=$(( ++index ))
	done


	return
}

#
# Remove the full backup given as $1, all its incremental backups and their respective services.
#
remove() {
	local FULL_BACKUP="$1"

	echo "Removing:"
	ls -d "${BACKUP_DIRECTORY}/${FULL_BACKUP}"*

	for BACKUP_PATH in "${BACKUP_DIRECTORY}/${FULL_BACKUP}"* ; do
		local BACKUP_NAME="$(basename $BACKUP_PATH)"

		echo "Removing ${BACKUP_NAME} in ${BACKUP_PATH}"

		rm -Rf "${BACKUP_PATH}"
	done
}

case $1 in
	backup)

		backup
	;;
	restore)

		shift
		restore "${BACKUP_DIRECTORY}" $1

		;;
	cleanup)
		echo "======================================================================"
		echo "= Clean up expired backups from ${BACKUP_PATH}"
		echo "======================================================================"
		echo ""

		cleanup
		exit 0
		;;
	run)
		shift

		echo "======================================================================"
		echo "= Starting command $*"
		echo "======================================================================"
		echo ""

		$*
		echo "Done"
		exit 0
		;;
	remove)

		shift
		echo "======================================================================"
		echo "= Removing backup $1"
		echo "======================================================================"
		echo ""

		if [ -z "$1" ] ; then
			echo "Missing argument: Backup to remove"
			exit 1
		fi

		remove $1
		;;
	help)
		shift
		usage
		exit 0
		;;
	*)
		usage
		exit 0
		;;
esac

